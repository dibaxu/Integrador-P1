# main.py
# Sistema de Gesti√≥n de Productos con √Årbol de Categor√≠as

class NodoProducto:
    def __init__(self, nombre: str, precio: float = None, stock: int = None, es_producto: bool = False):
        self.nombre = nombre
        self.precio = precio
        self.es_producto = es_producto
        self.stock = stock
        self.hijos: dict = {}

    def agregar_hijo(self, nodo):
        if nodo.nombre in self.hijos:
            print(f"Error: Ya existe un hijo con el nombre '{nodo.nombre}'.")
            return
        self.hijos[nodo.nombre] = nodo
        
    def listar_productos(self):
        productos = []
        if self.es_producto:
            productos.append(self)
        for hijo in self.hijos.values():
            productos.extend(hijo.listar_productos())
        return productos

    def actualizar_producto(self, nuevo_nombre=None, nuevo_precio=None, nuevo_stock=None):
        if not self.es_producto:
            print("Error: No se puede actualizar una categor√≠a.")
            return
        if nuevo_nombre:
            self.nombre = nuevo_nombre
        if nuevo_precio is not None:
            self.precio = nuevo_precio
        if nuevo_stock is not None:
            self.stock = nuevo_stock
        print(f"Producto '{self.nombre}' actualizado.")


class SistemaProductos:
    def __init__(self):
        self.raiz = NodoProducto("Cat√°logo de Productos")

    # ----- B√∫squeda -----
    def buscar_nodo(self, nombre: str, nodo_inicial=None):
        # Funci√≥n de b√∫squeda gen√©rica (para productos o categor√≠as)
        if nodo_inicial is None:
            nodo_inicial = self.raiz

        def _buscar(nodo, destino):
            if nodo.nombre == destino:
                return nodo
            for hijo in nodo.hijos.values():
                resultado = _buscar(hijo, destino)
                if resultado:
                    return resultado
            return None
        return _buscar(nodo_inicial, nombre)

    # ----- Categor√≠as -----
    def agregar_categoria(self, nombre: str, ruta_padre: str = None):
        # CORREGIDO: La l√≥gica ahora es m√°s clara. Se busca la categor√≠a padre por su nombre.
        nodo_padre = self.raiz
        if ruta_padre:
            nodo_padre = self.buscar_nodo(ruta_padre)
            if not nodo_padre or nodo_padre.es_producto:
                print(f"Error: La categor√≠a padre '{ruta_padre}' no existe o es un producto.")
                return

        if nombre in nodo_padre.hijos:
            print(f"Error: La categor√≠a '{nombre}' ya existe en '{nodo_padre.nombre}'.")
            return
            
        nueva_categoria = NodoProducto(nombre)
        nodo_padre.agregar_hijo(nueva_categoria)
        print(f"‚úÖ Categor√≠a '{nombre}' agregada en '{nodo_padre.nombre}'.")

    def eliminar_categoria(self, nombre_categoria: str):
        # CORREGIDO: Se implement√≥ la llamada a la funci√≥n interna y se manejan los resultados.
        def _encontrar_y_eliminar_padre(nodo_actual):
            if nombre_categoria in nodo_actual.hijos:
                nodo_a_eliminar = nodo_actual.hijos[nombre_categoria]
                if nodo_a_eliminar.es_producto:
                    return "es_producto" # No es una categor√≠a
                if nodo_a_eliminar.hijos:
                    return "no_vacia" # No se puede eliminar si tiene hijos
                
                del nodo_actual.hijos[nombre_categoria]
                return "exito"

            for hijo in nodo_actual.hijos.values():
                if not hijo.es_producto:
                    resultado = _encontrar_y_eliminar_padre(hijo)
                    if resultado:
                        return resultado
            return None

        resultado = _encontrar_y_eliminar_padre(self.raiz)
        if resultado == "exito":
            print(f"üóëÔ∏è Categor√≠a '{nombre_categoria}' eliminada correctamente.")
        elif resultado == "no_vacia":
            print(f"Error: No se puede eliminar la categor√≠a '{nombre_categoria}' porque no est√° vac√≠a.")
        elif resultado == "es_producto":
            print(f"Error: '{nombre_categoria}' es un producto, no una categor√≠a.")
        else:
            print(f"Error: No se encontr√≥ la categor√≠a '{nombre_categoria}'.")
            
    # ----- Productos -----
    def agregar_producto(self, categoria: str, nombre: str, precio: float, stock: int):
        nodo_categoria = self.buscar_nodo(categoria)
        if nodo_categoria and not nodo_categoria.es_producto:
            if nombre in nodo_categoria.hijos:
                print(f"Error: Ya existe un item con el nombre '{nombre}' en '{categoria}'.")
                return
            nuevo_producto = NodoProducto(nombre, precio, stock, es_producto=True)
            nodo_categoria.agregar_hijo(nuevo_producto)
            print(f"‚úÖ Producto '{nombre}' agregado a la categor√≠a '{categoria}'.")
        else:
            print(f"Error: No se encontr√≥ la categor√≠a '{categoria}'.")
            
    def eliminar_producto(self, nombre_producto: str):
        # NUEVA FUNCI√ìN: Permite eliminar un producto busc√°ndolo en todo el √°rbol.
        def _encontrar_y_eliminar_padre(nodo_actual):
            if nombre_producto in nodo_actual.hijos:
                nodo_a_eliminar = nodo_actual.hijos[nombre_producto]
                if not nodo_a_eliminar.es_producto:
                    return False # No es un producto
                
                del nodo_actual.hijos[nombre_producto]
                return True

            for hijo in nodo_actual.hijos.values():
                if not hijo.es_producto: # Solo buscar dentro de categor√≠as
                    if _encontrar_y_eliminar_padre(hijo):
                        return True
            return False
            
        if _encontrar_y_eliminar_padre(self.raiz):
            print(f"üóëÔ∏è Producto '{nombre_producto}' eliminado correctamente.")
        else:
            print(f"Error: No se encontr√≥ el producto '{nombre_producto}' o es una categor√≠a.")

    # ----- Visualizaci√≥n -----
    def mostrar_arbol(self, nodo=None, prefijo=""):
        # Funci√≥n √∫til para visualizar la estructura del √°rbol.
        if nodo is None:
            nodo = self.raiz
        
        # Determina si es el √∫ltimo hijo para dibujar las l√≠neas correctamente
        hijos = list(nodo.hijos.values())
        for i, hijo in enumerate(hijos):
            conector = "‚îî‚îÄ‚îÄ " if i == len(hijos) - 1 else "‚îú‚îÄ‚îÄ "
            if hijo.es_producto:
                print(f"{prefijo}{conector}üì¶ {hijo.nombre} (Precio: ${hijo.precio}, Stock: {hijo.stock})")
            else:
                print(f"{prefijo}{conector}üìÅ {hijo.nombre}")
                # Prepara el prefijo para la siguiente llamada recursiva
                nuevo_prefijo = prefijo + ("    " if i == len(hijos) - 1 else "‚îÇ   ")
                self.mostrar_arbol(hijo, nuevo_prefijo)

# ------------------------------------------------------------------------------------
# -------- PASO A PASO PARA PROBAR EL C√ìDIGO --------
# ------------------------------------------------------------------------------------

if __name__ == "__main__":
    # 1. Creamos una instancia de nuestro sistema
    sistema = SistemaProductos()
    print("üöÄ Sistema de Gesti√≥n de Productos iniciado.")
    print("==========================================")

    # 2. Agregamos categor√≠as principales
    print("\nPASO 1: Agregando categor√≠as principales...")
    sistema.agregar_categoria("Almac√©n")
    sistema.agregar_categoria("L√°cteos")
    sistema.agregar_categoria("Limpieza")
    
    # 3. Agregamos una subcategor√≠a dentro de "Almac√©n"
    print("\nPASO 2: Agregando subcategor√≠as...")
    sistema.agregar_categoria("Bebidas", ruta_padre="Almac√©n")
    sistema.agregar_categoria("Galletitas", ruta_padre="Almac√©n")
    # Intentamos agregar en una categor√≠a que no existe (mostrar√° un error)
    sistema.agregar_categoria("Jugos", ruta_padre="Bebidas sin gas") 
    
    print("\n√Årbol de categor√≠as actual:")
    sistema.mostrar_arbol()
    print("==========================================")

    # 4. Agregamos productos a las categor√≠as
    print("\nPASO 3: Agregando productos...")
    sistema.agregar_producto("L√°cteos", "Leche Entera", 150.50, 50)
    sistema.agregar_producto("L√°cteos", "Yogur de Frutilla", 99.99, 30)
    sistema.agregar_producto("Bebidas", "Gaseosa Cola", 250.0, 100)
    sistema.agregar_producto("Limpieza", "Lavandina", 120.0, 40)
    
    print("\n√Årbol con productos:")
    sistema.mostrar_arbol()
    print("==========================================")

    # 5. Listamos todos los productos de una categor√≠a espec√≠fica
    print("\nPASO 4: Listando productos de 'L√°cteos'...")
    nodo_lacteos = sistema.buscar_nodo("L√°cteos")
    if nodo_lacteos:
        productos_lacteos = nodo_lacteos.listar_productos()
        for p in productos_lacteos:
            print(f" - {p.nombre}: ${p.precio}")
    print("==========================================")

    # 6. Actualizamos un producto
    print("\nPASO 5: Actualizando el precio y stock de 'Leche Entera'...")
    producto_leche = sistema.buscar_nodo("Leche Entera")
    if producto_leche:
        producto_leche.actualizar_producto(nuevo_precio=165.0, nuevo_stock=45)
    
    print("\n√Årbol despu√©s de la actualizaci√≥n:")
    sistema.mostrar_arbol()
    print("==========================================")
    
    # 7. Eliminamos un producto y una categor√≠a
    print("\nPASO 6: Eliminando el producto 'Yogur de Frutilla' y la categor√≠a 'Galletitas'...")
    sistema.eliminar_producto("Yogur de Frutilla")
    # Intentamos eliminar una categor√≠a con productos (mostrar√° error)
    sistema.eliminar_categoria("L√°cteos") 
    # Eliminamos una categor√≠a vac√≠a
    sistema.eliminar_categoria("Galletitas")

    print("\n√Årbol final:")
    sistema.mostrar_arbol()
    print("==========================================")
    print("‚úÖ Prueba finalizada.")